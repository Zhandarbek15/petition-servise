[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Жандарбек\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Жандарбек\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 19.0.1)
[debug]       Load.loadUnit: plugins took 100.6021ms
[debug]       Load.loadUnit: defsScala took 0.3408ms
[debug] [Loading] Scanning directory C:\Users\Жандарбек\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Жандарбек\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.3441 ms
[debug]           Load.resolveProject(global-plugins) took 68.9711ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Жандарбек\.sbt\1.0\plugins, plugins: List(<none>))) took 114.1764ms
[debug] [Loading] Done in C:\Users\Жандарбек\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 150.1453ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2969ms
[debug]     Load.loadUnit(file:/C:/Users/Жандарбек/.sbt/1.0/plugins/, ...) took 264.096ms
[debug]   Load.apply: load took 556.0488ms
[debug]   Load.apply: resolveProjects took 8.4152ms
[debug]   Load.apply: finalTransforms took 91.812ms
[debug]   Load.apply: config.delegates took 6.2486ms
[debug]   Load.apply: Def.make(settings)... took 426.3771ms
[debug]   Load.apply: structureIndex took 109.3591ms
[debug]   Load.apply: mkStreams took 1.7794ms
[info] loading global plugins from C:\Users\Жандарбек\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2395.9028ms
[debug]           Load.loadUnit: plugins took 18.2191ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB\project
[debug]             Load.loadUnit: mkEval took 8.4813ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3901 ms
[info] loading settings for project db-build from idea.sbt ...
[debug]               Load.resolveProject(db-build) took 2.6626ms
[debug]             Load.loadTransitive: finalizeProject(Project(id db-build, base: C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB\project, plugins: List(<none>))) took 4.4879ms
[debug] [Loading] Done in C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB\project, returning: (db-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2004.5209ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.5373ms
[debug]         Load.loadUnit(file:/C:/Users/Жандарбек/OneDrive/Рабочий%20стол/ООП4%20Ф/SkalaP/DB/project/, ...) took 2029.2603ms
[debug]       Load.apply: load took 2030.7543ms
[debug]       Load.apply: resolveProjects took 0.1238ms
[debug]       Load.apply: finalTransforms took 30.1215ms
[debug]       Load.apply: config.delegates took 0.3834ms
[debug]       Load.apply: Def.make(settings)... took 69.6785ms
[debug]       Load.apply: structureIndex took 31.3814ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3269.7ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB
[debug]       Load.loadUnit: mkEval took 0.2714ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4865 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 32.5981ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB, plugins: List(<none>))) took 35.7152ms
[debug] [Loading] Done in C:\Users\Жандарбек\OneDrive\Рабочий стол\ООП4 Ф\SkalaP\DB, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1219.12ms
[debug]     Load.loadUnit: cleanEvalClasses took 23.5027ms
[debug]   Load.loadUnit(file:/C:/Users/Жандарбек/OneDrive/Рабочий%20стол/ООП4%20Ф/SkalaP/DB/, ...) took 4513.4116ms
[debug] Load.apply: load took 4515.5094ms
[debug] Load.apply: resolveProjects took 0.1039ms
[debug] Load.apply: finalTransforms took 29.5309ms
[debug] Load.apply: config.delegates took 0.3138ms
[debug] Load.apply: Def.make(settings)... took 50.1496ms
[debug] Load.apply: structureIndex took 25.1763ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to DB (in build file:/C:/Users/Жандарбек/OneDrive/Рабочий%20стол/ООП4%20Ф/SkalaP/DB/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59428 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59428, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to DB (in build file:/C:/Users/Жандарбек/OneDrive/Рабочий%20стол/ООП4%20Ф/SkalaP/DB/)
[debug] > Exec(idea-shell, None, None)
